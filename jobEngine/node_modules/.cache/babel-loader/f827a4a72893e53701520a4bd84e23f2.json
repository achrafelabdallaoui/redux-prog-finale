{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\infotech\\\\Desktop\\\\jobEngine\\\\src\\\\components\\\\CompanySearchResults.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Job from \"./Job\";\nimport { useParams } from \"react-router-dom\"; // Componente React per visualizzare i risultati della ricerca di lavoro per un'azienda specifica\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompanySearchResults = () => {\n  _s();\n\n  // Stato locale per memorizzare l'elenco dei lavori\n  const [jobs, setJobs] = useState([]); // Ottenere i parametri dall'URL tramite useParams di react-router-dom\n\n  const params = useParams(); // Endpoint di base per la chiamata API\n\n  const baseEndpoint = \"https://strive-benchmark.herokuapp.com/api/jobs?company=\"; // Effetto che si attiva all'avvio del componente\n\n  useEffect(() => {\n    // Richiedi e imposta l'elenco dei lavori quando il componente viene montato\n    getJobs();\n  }, []); // Funzione per ottenere i lavori dalla chiamata API\n\n  const getJobs = async () => {\n    try {\n      // Esegui la chiamata API con il nome dell'azienda dai parametri dell'URL\n      const response = await fetch(baseEndpoint + params.company); // Verifica se la risposta è positiva (HTTP status code 200-299)\n\n      if (response.ok) {\n        // Estrai i dati dalla risposta JSON\n        const {\n          data\n        } = await response.json(); // Imposta lo stato locale con l'elenco dei lavori\n\n        setJobs(data);\n      } else {\n        // Gestisci un errore se la risposta non è positiva\n        alert(\"Error fetching results\");\n      }\n    } catch (error) {\n      // Gestisci eventuali errori durante la chiamata API\n      console.log(error);\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    // Layout a griglia di Bootstrap per visualizzare i risultati\n    _jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          className: \"my-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"display-4\",\n            children: [\"Job posting for: \", params.company]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }, this), jobs.map(jobData => /*#__PURE__*/_jsxDEV(Job, {\n            data: jobData\n          }, jobData._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(CompanySearchResults, \"dckmTRAm79Ju2O9AWzYTIwDN4qo=\", false, function () {\n  return [useParams];\n});\n\n_c = CompanySearchResults;\nexport default CompanySearchResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompanySearchResults\");","map":{"version":3,"names":["useEffect","useState","Container","Row","Col","Job","useParams","CompanySearchResults","jobs","setJobs","params","baseEndpoint","getJobs","response","fetch","company","ok","data","json","alert","error","console","log","map","jobData","_id"],"sources":["C:/Users/infotech/Desktop/jobEngine/src/components/CompanySearchResults.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Job from \"./Job\";\nimport { useParams } from \"react-router-dom\";\n  \n// Componente React per visualizzare i risultati della ricerca di lavoro per un'azienda specifica\nconst CompanySearchResults = () => {\n  // Stato locale per memorizzare l'elenco dei lavori\n  const [jobs, setJobs] = useState([]);\n\n  // Ottenere i parametri dall'URL tramite useParams di react-router-dom\n  const params = useParams();\n\n  // Endpoint di base per la chiamata API\n  const baseEndpoint = \"https://strive-benchmark.herokuapp.com/api/jobs?company=\";\n\n  // Effetto che si attiva all'avvio del componente\n  useEffect(() => {\n    // Richiedi e imposta l'elenco dei lavori quando il componente viene montato\n    getJobs();\n  }, []);\n\n  // Funzione per ottenere i lavori dalla chiamata API\n  const getJobs = async () => {\n    try {\n      // Esegui la chiamata API con il nome dell'azienda dai parametri dell'URL\n      const response = await fetch(baseEndpoint + params.company);\n\n      // Verifica se la risposta è positiva (HTTP status code 200-299)\n      if (response.ok) {\n        // Estrai i dati dalla risposta JSON\n        const { data } = await response.json();\n\n        // Imposta lo stato locale con l'elenco dei lavori\n        setJobs(data);\n      } else {\n        // Gestisci un errore se la risposta non è positiva\n        alert(\"Error fetching results\");\n      }\n    } catch (error) {\n      // Gestisci eventuali errori durante la chiamata API\n      console.log(error);\n    }\n  };\n\n  return (\n    // Layout a griglia di Bootstrap per visualizzare i risultati\n    <Container>\n      <Row>\n        <Col className=\"my-3\">\n          {/* Intestazione con il nome dell'azienda selezionata */}\n          <h1 className=\"display-4\">Job posting for: {params.company}</h1>\n          \n          {/* Mappa attraverso l'elenco dei lavori e visualizza ciascun lavoro utilizzando il componente Job */}\n          {jobs.map((jobData) => (\n            <Job key={jobData._id} data={jobData} />\n          ))}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default CompanySearchResults;\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,SAAT,QAA0B,kBAA1B,C,CAEA;;;;AACA,MAAMC,oBAAoB,GAAG,MAAM;EAAA;;EACjC;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC,CAFiC,CAIjC;;EACA,MAAMS,MAAM,GAAGJ,SAAS,EAAxB,CALiC,CAOjC;;EACA,MAAMK,YAAY,GAAG,0DAArB,CARiC,CAUjC;;EACAX,SAAS,CAAC,MAAM;IACd;IACAY,OAAO;EACR,CAHQ,EAGN,EAHM,CAAT,CAXiC,CAgBjC;;EACA,MAAMA,OAAO,GAAG,YAAY;IAC1B,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,YAAY,GAAGD,MAAM,CAACK,OAAvB,CAA5B,CAFE,CAIF;;MACA,IAAIF,QAAQ,CAACG,EAAb,EAAiB;QACf;QACA,MAAM;UAAEC;QAAF,IAAW,MAAMJ,QAAQ,CAACK,IAAT,EAAvB,CAFe,CAIf;;QACAT,OAAO,CAACQ,IAAD,CAAP;MACD,CAND,MAMO;QACL;QACAE,KAAK,CAAC,wBAAD,CAAL;MACD;IACF,CAfD,CAeE,OAAOC,KAAP,EAAc;MACd;MACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EACF,CApBD;;EAsBA;IAAA;IACE;IACA,QAAC,SAAD;MAAA,uBACE,QAAC,GAAD;QAAA,uBACE,QAAC,GAAD;UAAK,SAAS,EAAC,MAAf;UAAA,wBAEE;YAAI,SAAS,EAAC,WAAd;YAAA,gCAA4CV,MAAM,CAACK,OAAnD;UAAA;YAAA;YAAA;YAAA;UAAA,QAFF,EAKGP,IAAI,CAACe,GAAL,CAAUC,OAAD,iBACR,QAAC,GAAD;YAAuB,IAAI,EAAEA;UAA7B,GAAUA,OAAO,CAACC,GAAlB;YAAA;YAAA;YAAA;UAAA,QADD,CALH;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EAFF;AAgBD,CAvDD;;GAAMlB,oB;UAKWD,S;;;KALXC,oB;AAyDN,eAAeA,oBAAf"},"metadata":{},"sourceType":"module"}